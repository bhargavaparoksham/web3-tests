const ethTx = require('ethereumjs-tx').Transaction
const Web3 = require('web3')
const dotenv = require('dotenv').config()
var url = process.env.ROPSTEN



const testnet = new Web3(url)

const acc1 = process.env.ACCOUNT_1
const acc2 = process.env.ACCOUNT_1

const key1 = Buffer.from(process.env.PRIVATE_KEY_1, 'hex')
const key2 = Buffer.from(process.env.PRIVATE_KEY_2, 'hex')

//testnet.eth.getBalance(acc1, (err, bal) => {console.log('acc1 balance: ',testnet.utils.fromWei(bal,'ether'))})

//Get transaction count for nonce, wait & then once you get it initiate the transaction

testnet.eth.getTransactionCount(acc1, (err, txCount) => {

	//Get Smart Contract Data
	//Smart contract byte code is taken from truffle -> build folder -> contract_name.json

	//The below bytecode is for hello.sol

	const Data = '0x608060405234801561001057600080fd5b506040518060400160405280600d81526020017f48656c6c6f2042686172676176000000000000000000000000000000000000008152506000908051906020019061005c929190610062565b50610107565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100a357805160ff19168380011785556100d1565b828001600101855582156100d1579182015b828111156100d05782518255916020019190600101906100b5565b5b5090506100de91906100e2565b5090565b61010491905b808211156101005760008160009055506001016100e8565b5090565b90565b61032d806101166000396000f3fe608060405234801561001057600080fd5b5060043610610053576000357c010000000000000000000000000000000000000000000000000000000090048063a413686214610058578063fe50cc7214610113575b600080fd5b6101116004803603602081101561006e57600080fd5b810190808035906020019064010000000081111561008b57600080fd5b82018360208201111561009d57600080fd5b803590602001918460018302840111640100000000831117156100bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610196565b005b61011b6101b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015b578082015181840152602081019050610140565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80600090805190602001906101ac929190610252565b5050565b606060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102485780601f1061021d57610100808354040283529160200191610248565b820191906000526020600020905b81548152906001019060200180831161022b57829003601f168201915b5050505050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061029357805160ff19168380011785556102c1565b828001600101855582156102c1579182015b828111156102c05782518255916020019190600101906102a5565b5b5090506102ce91906102d2565b5090565b6102f491905b808211156102f05760008160009055506001016102d8565b5090565b9056fea26469706673582212205aa4e692fc17defe51b404cf6a9a2fd664507f94882af80b5ee3bddb6a58286164736f6c63430006000033'

	//Transaction Data

 	//console.log(txCount)
	const tx = new ethTx({ 
		nonce: testnet.utils.toHex(txCount), 
		gasLimit: testnet.utils.toHex(1000000), 
		gasPrice: testnet.utils.toHex(testnet.utils.toWei('10','gwei')),
		data: Data}, 
		{chain:'ropsten'})

	//Sign the transaction
	tx.sign(key1)
	const serialTx = tx.serialize() //raw needs to be serialized
	const raw = '0x' + serialTx.toString('hex')

	//Broadcast the transaction 
	testnet.eth.sendSignedTransaction(raw, (err, txHash) => {
		console.log('Error: ',err,'Deployment Successful, txHash: ',txHash)

	})


})


















